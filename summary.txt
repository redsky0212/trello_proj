* 트렐로 요구사항 분석

* vue-cli를 통해 프로젝트 구성.
  - webpack을 통한 개발환경 구성.
  - 먼저 nodejs, npm 은 기본으로 설치가 되어 있어야 한다.
  - vue cli를 설치한다. (프로젝트의 기본 템플릿을 설정해주는 커멘드라인인터페이스 기반의 스케폴딩 도구)
    (npm install -g @vue/cli) --> 3.X버전부터는 이름이 변경됨.
  - vue-cli를 통하여 webpack-simple 로 구성한다.
    (vue init webpack-simple 또는 vue init webpack-simple 프로젝트명)
    (cli3에서는 vue init 을 사용하려면 @vue/cli-init 를 설치해야한다. (npm install -g @vue/cli-init) )
  - npm i (개발환경에 필요한 라이브러리들을 다운받는다.)
  - 모두 설치가 되었으면 npm run dev로 서버를 실행하여 기본생성된 화면을 띄울 수 있다.


* 라우팅의 필요성.
  - 라우팅의 종류 : 서버라우팅(매번모든화면갱신), 브라우져라우팅(특정부분만화면갱신).

* vue 라우터
  - vue-router설치  (npm install vue-router --save-dev)
  - 사용 : import VueRouter from 'vue-router';  
           Vue.use(VueRouter);
  - 사용법 참조 : https://router.vuejs.org/kr/api/
  - 가이드 : https://router.vuejs.org/kr/guide/

* main.js에 몰려있는 router소스를 따로 컴포넌트로 분리
  - src/router/index.js 참조

* router-view, 기타 뷰들을 컴포넌트화 시켜서 분리시키기.
  - components/Home.vue, components/Login.vue, components/NotFound.vue 소스 참조.

* router-link 사용
  - vue router를 사용할때는 router-link를 사용하기를 지향한다.
    (페이지전체로드방지 및 라우터모드에 따른 수정이 불필요.)
  - 네비게이션 부분은 따로 컴포넌트로 분리한다.

* 동적인 라우팅 하기.
  - 트렐로 화면의 메인화면에서 하나의 board를 클릭해서 들어가는 첫번째 화면 만들기.
  - Board.vue
  - this.$route 에서 라우터정보를 받을 수 있음.
  - 라우팅 넣어줄때 path부분에 '/aaa/:b' 와 같이 동적으로 라우팅.

* 중첩 라우팅(Nested Router) 하기.
  - 트렐로 화면에서는 board화면에 레이어팝업으로 카드가 뜨기때문에 중첩 라우팅으로 화면을 설계함.
  - router에 children 속성으로 하위 라우터를 지정한다.
  - 상위 라우터화면에서는 <router-view></router-view> 으로 하위 라우터를 보여준다.
  - children으로 중첩된 화면은 created가 한번만 호출 되므로 갱신이 안됀다. 그래서 watch에서 구현.

* 데이터 불러오기
  - methods객체에 특정 함수를 만든다음 호출하는 형식으로 데이터를 가져옴.

* 백엔드 API 호출
  - 미리 만들어놓은 서버를 clone한다음 사용. (git clone https://github.com/jeonghwan-kim/lecture-vue-trello-server.git)
  - nodejs로 만들어진 lecture-vue-trello-server폴더가 생성됨. npm install을 통해서 관련 라이브러리를 다운 받는다.
  - 해당 폴더에서 npm run dev를 실행하면 localhost:3000 으로 서버가 뜬다.
  - curl명령어를 통해서 api를 호출해본다. ( curl localhost:3000/health -v )
  - -v 옵션을 쓰면 request, response정보를 자세히 볼 수 있다.

* Ajax - HttpXMLRequest로 호출
  - 브라우져에서 HttpXMLRequest로 호출하기.
  - Home.vue컴포넌트에서 fetchData함수를 만들고 XMLHttpRequest로 api호출 예제를 만들어본다.

* Axios로 api호출
  - axios github 홈페이지 참조.
  - nodejs 및 브라우져에서 api호출 가능.
  - Home.vue컴포넌트에 axios를 이용한 api호출 예제 작성.

* 실제 보드 조회 API 사용해보기
  - 기존 Home.vue파일을 Home_axiostest.vue로 따로 저장하고.
  - Home.vue컴포넌트에서 boards api를 사용 작성.
  - boards api호출시 인증(login)이 안되어 있으면 error가 남.
  - error발생시 this.$router.replace()로 login화면으로 이동 처리.

* Axios 실전에서 사용시 주의점.
  - axios같은 라이브러리를 사용시 코드를 wraping해서 사용하는게 좋음.
  - api 폴더를 하나 더 만든다.
  - api폴더의 index.js파일을 만들고 코딩. 

* 인증 API 사용해보기.
  - login api로 토큰정보를 가져와 로컬스토리지에 저장한다.

* 라우터 네비게이션 가드 (beforeEnter로 화면 이동 전에 인증여부 처리 해보기.)
  - 참조 : (https://router.vuejs.org/kr/guide/advanced/navigation-guards.html)
  - api를 호출하기전에 인증 여부를 파악할 수 없나?
  - 저장되어있는 로컬스토리지에 토큰값 여부를 판단하여 로직을 변경할 수 있음.
  - 모든 화면에 토큰을 확인하는 로직도 필요함.
  - 먼저 routes옵션에 beforeEnter를 설정해주고
  - 스토리지에 token값을 체크한 후 to, from, next를 이용하여 여부에 따른 화면이동을 한다.(router/index.js 소스참조)

* 로그인 페이지 만들기
  - 미리 만들어둔 퍼블화면파일 (퍼블리셔가 파일을 준다는 가정하에...)
  - inflean에 있는 저장소를 clone한다. (https://github.com/jeonghwan-kim/lecture-vue-trello.git)
  - 브랜치를 'auth/navigation-guard' 로 이동 (git checkout -f auth/navigation-guard)
  - cherry-pick으로 해당 커밋의 스타일만 가져온다. (git cherry-pick 2590135)(전체 공통 스타일)(App.vue)
  - cherry-pick으로 해당 화면의 퍼블,script,스타일등을 가져온다 (git cherry-pick 6a57a8f)(로그인화면)(Login.vue)